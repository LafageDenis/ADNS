{
  "hash": "4bee53c58a7df5e28008d8ab77303a33",
  "result": {
    "markdown": "---\ntitle: \"Comparaison de moyennes\"\ndescription: \"La comparaison de moyenne sous R and Julia\"\nauthor:\n  - name: Denis Lafage\n    url: {}\ndate: \"2022-08-25\"\ncategories: [\"R\", \"Julia\", \"moyennes\", \"statistiques\"]\nbibliography: biblio_comparaison_moyennes.bib\n#image: x.png\nformat:\n  html:\n    toc: true\n    code-link: true\n    \n---\n\n\n:::{.callout-note}\nPour rappel, je m'efforce dans cette série de posts de prendre comme excuse l'analyse \nstatistique du jeux de données **PalmerPenguins** pour mettre en avant les bases de l'analyse de données sous R. \nCes posts ne sont en aucun cas des cours de statistiques !\nJ'en profite par ailleurs pour me former à Julia et vous trouverez donc pour chaque block de code R, l'équivalent en \nJulia... lorsque j'ai réussi à le trouver.\n:::\n\n:::{callout-important}\nLes liens des fonctions appelées sous R pointent vers la documentation de cette dernière. Malheuresement [Quarto](https://quarto.org/) (avec lequel je code ce site) ne génére pas encore les liens pour Julia.\n:::\n\n# Préparation \n\nNous allons commencer par charger les packages qui seront nécessaires au chargement et à la manipulation des données, à la réalisation des graphiques et aux analyses statistiques.\n\n## Chargement des packages\n\n::: {.panel-tabset}\n\n## R\nOn charge les packages avec la fonction library(). Attention, vous devez les avoir préalablement\ninstallé via install.packages(\"nom_du_package\").\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(palmerpenguins) # C'est le fameux jeux de données\nlibrary(ggplot2) # Création des graphiques\nlibrary(dplyr) # Manipulation des données\nlibrary(tidyr) # Manipulation des données\nlibrary(nortest) # test de normalité\n```\n:::\n\n\n## Julia\nOn charge les package avec using(). Attention, vous devez les avoir préalablement\ninstallé via pkg : add nom_du_package.\n\n::: {.cell}\n\n```{.julia .cell-code}\nusing PalmerPenguins # C'est le fameux jeux de données\nusing DataFrames # Gestion des DataFrames\nusing StatsPlots # Création des graphiques\nusing HypothesisTests # tests statistiques\nusing Distributions # Lois de distribution \n```\n:::\n\n:::\n\n\n---\nnocite: |\n  @Rpkg_palmer, @Rpkg_ggplot2, @Rpkg_dplyr, @Rpkg_tidyr, @Rpkg_nortest,\n---\n\n\n# Chargement des données\n\nNous allons utiliser le fameux jeux de données Palmer penguins. Il est packagé dans les deux languages.\nLes données ont été collectées et mises à disposition par le Docteur K. Gorman et la station Palmer Station (Antarctic). Elles ont fait l'objet d'une publication [@gorman_2014]. Dans ce dataset, \n\n::: {.panel-tabset}\n\n## R\n\n  - Chargeons données via la fonction data\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(package = \"palmerpenguins\") \n```\n:::\n\n\n  - On peut ensuite obtenir un rapide aperçu grâce à glimpse()\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(penguins)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 344\nColumns: 8\n$ species           <fct> Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…\n$ island            <fct> Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…\n$ bill_length_mm    <dbl> 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, …\n$ bill_depth_mm     <dbl> 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, …\n$ flipper_length_mm <int> 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186…\n$ body_mass_g       <int> 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, …\n$ sex               <fct> male, female, female, NA, female, male, female, male…\n$ year              <int> 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…\n```\n:::\n:::\n\n\n  - Enfin, on supprime les lignes avec des valeurs manquantes (ce n'est pas forcément la meilleur option, on en reparlera dans un article dédié)\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins <-penguins %>% \n  drop_na()\n# vous remarquez le fameux 'pipe' (%>%) qui permet \n# d’enchaîner les fonctions appliquées. Depuis peu, \n# R intègre un pipe natif : |>\n```\n:::\n\n\n## Julia\n\n::: {.cell}\n\n:::\n\n  - Chargeons données (PalmerPenguins.load()) et transformons les en DataFrame\n\n::: {.cell}\n\n```{.julia .cell-code}\ntable = PalmerPenguins.load() \npenguins = DataFrame(table) # on transforme le csv en DataFrame\n```\n:::\n\n\n  - On peut ensuite obtenir un rapide aperçu grâce à describe()\n\n::: {.cell}\n\n```{.julia .cell-code}\ndescribe(penguins) # description des données, c'est l'équivalent de glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n7×7 DataFrame\n Row │ variable           mean     min     median  max        nmissing  eltype ⋯\n     │ Symbol             Union…   Any     Union…  Any        Int64     Type   ⋯\n─────┼──────────────────────────────────────────────────────────────────────────\n   1 │ species                     Adelie          Gentoo            0  String ⋯\n   2 │ island                      Biscoe          Torgersen         0  String\n   3 │ bill_length_mm     43.9219  32.1    44.45   59.6              2  Union{\n   4 │ bill_depth_mm      17.1512  13.1    17.3    21.5              2  Union{\n   5 │ flipper_length_mm  200.915  172     197.0   231               2  Union{ ⋯\n   6 │ body_mass_g        4201.75  2700    4050.0  6300              2  Union{\n   7 │ sex                         female          male             11  Union{\n                                                                1 column omitted\n```\n:::\n:::\n\n\n- Enfin, on supprime les lignes avec des valeurs manquantes (ce n'est pas forcément la meilleur option, on en reparlera dans un article dédié)\n\n::: {.cell}\n\n```{.julia .cell-code}\ndropmissing!(penguins) # suppression des lignes avec des valeurs manquantes (équivalent de drop_na()). Ici, le ! (bang) permet de modifier le DataFrame en place\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n333×7 DataFrame\n Row │ species    island     bill_length_mm  bill_depth_mm  flipper_length_mm  ⋯\n     │ String15   String15   Float64         Float64        Int64              ⋯\n─────┼──────────────────────────────────────────────────────────────────────────\n   1 │ Adelie     Torgersen            39.1           18.7                181  ⋯\n   2 │ Adelie     Torgersen            39.5           17.4                186\n   3 │ Adelie     Torgersen            40.3           18.0                195\n   4 │ Adelie     Torgersen            36.7           19.3                193\n   5 │ Adelie     Torgersen            39.3           20.6                190  ⋯\n   6 │ Adelie     Torgersen            38.9           17.8                181\n   7 │ Adelie     Torgersen            39.2           19.6                195\n   8 │ Adelie     Torgersen            41.1           17.6                182\n  ⋮  │     ⋮          ⋮            ⋮               ⋮                ⋮          ⋱\n 327 │ Chinstrap  Dream                46.8           16.5                189  ⋯\n 328 │ Chinstrap  Dream                45.7           17.0                195\n 329 │ Chinstrap  Dream                55.8           19.8                207\n 330 │ Chinstrap  Dream                43.5           18.1                202\n 331 │ Chinstrap  Dream                49.6           18.2                193  ⋯\n 332 │ Chinstrap  Dream                50.8           19.0                210\n 333 │ Chinstrap  Dream                50.2           18.7                198\n                                                  2 columns and 318 rows omitted\n```\n:::\n:::\n\n:::\n\n\n# Comparaison taille moyennes des becs entre mâles et femelles\n\nAvant de se lancer dans des tests statistiques, il est toujours bon de représenter les données sous forme de graphique.\nIci, nous allons réaliser des boxplots. Pour rappel, les boxplots nous donnent la [médiane](https://fr.wikipedia.org/wiki/M%C3%A9diane_(statistiques)) (la ligne horizontale), les 1ers et 3ièmes [quartiles](https://fr.wikipedia.org/wiki/Quartile) (le haut et le bas de la boîte) ainsi que le minimum et maximum (les moustaches). \n\n:::{.callout-note}\nNous n'utilisons les boxplots par défaut sans aucune option. La \"custumization\" des plots sera abordée dans un \nautre article.\n:::\n\n::: {.panel-tabset}\n## R\n - On utilise la fonction de ggplot pour définir le jeux de données et les axes et \n on ajoute la 'geom' (le type de graphique)\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = penguins, aes(x = sex, y = bill_length_mm)) +\n  geom_boxplot()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n## Julia\n\n::: {.cell}\n\n```{.julia .cell-code}\n# Ici on profite de la [macro](https://docs.julialang.org/en/v1/manual/metaprogramming/) @df\n# qui nous permet d'appeler les colonnes avec :)\n\n@df penguins boxplot(:sex, :bill_length_mm)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-11-J1.png){width=300}\n:::\n:::\n\n:::\n\nOn voit ici que même si les données sont très hétérogènes (les quartiles, minimum et maximum sont grands), \nle chevauchement est modéré. Il est donc envisageable de trouver une différence de taille moyenne entre les deux sexes.\n\n# Test de normalité\n\nAvant de se lancer dans le test de comparaison de moyennes, nous devons savoir si nos données sont normales.\nC'est l'une des hypothèses de base qui nous permet de choisir entre un test paramètrique (si les données sont normales)\nou non paramètrique (si elles ne le sont pas).\n\n## Graphiques\n\nEncore une fois, un petit graphique va nous aider...\n\n::: {.panel-tabset}\n\n## R\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = penguins, aes(x = bill_length_mm, color = sex)) +\n  geom_density() # rien de révolutionnaire, au lieu d'un boxplot on veut une version lissée d'un histogramme\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-2.png){width=672}\n:::\n:::\n\n\n## Julia\n\n::: {.cell}\n\n```{.julia .cell-code}\n@df penguins density(:bill_length_mm, group = :sex) # rien de révolutionnaire, au lieu d'un boxplot on veut une version lissée d'un histogramme\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-13-J1.png){width=300}\n:::\n:::\n\n:::\n\n## Test\n\n::: {.panel-tabset}\n\n## R\n\n::: {.cell}\n\n```{.r .cell-code}\nwith(penguins, tapply(bill_length_mm, sex, ad.test))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$female\n\n\tAnderson-Darling normality test\n\ndata:  X[[i]]\nA = 3.3953, p-value = 1.58e-08\n\n\n$male\n\n\tAnderson-Darling normality test\n\ndata:  X[[i]]\nA = 4.5409, p-value = 2.631e-11\n```\n:::\n:::\n\n\n## Julia\n\n::: {.cell}\n\n```{.julia .cell-code}\ngp_penguins = groupby(penguins, :sex, sort = true)  \n```\n\n::: {.cell-output .cell-output-stdout}\n```\nGroupedDataFrame with 2 groups based on key: sex\nFirst Group (165 rows): sex = \"female\"\n Row │ species    island     bill_length_mm  bill_depth_mm  flipper_length_mm  ⋯\n     │ String15   String15   Float64         Float64        Int64              ⋯\n─────┼──────────────────────────────────────────────────────────────────────────\n   1 │ Adelie     Torgersen            39.5           17.4                186  ⋯\n   2 │ Adelie     Torgersen            40.3           18.0                195\n   3 │ Adelie     Torgersen            36.7           19.3                193\n   4 │ Adelie     Torgersen            38.9           17.8                181\n   5 │ Adelie     Torgersen            41.1           17.6                182  ⋯\n   6 │ Adelie     Torgersen            36.6           17.8                185\n   7 │ Adelie     Torgersen            38.7           19.0                195\n   8 │ Adelie     Torgersen            34.4           18.4                184\n  ⋮  │     ⋮          ⋮            ⋮               ⋮                ⋮          ⋱\n 158 │ Chinstrap  Dream                45.7           17.3                193  ⋯\n 159 │ Chinstrap  Dream                42.5           17.3                187\n 160 │ Chinstrap  Dream                45.2           16.6                191\n 161 │ Chinstrap  Dream                45.6           19.4                194\n 162 │ Chinstrap  Dream                46.8           16.5                189  ⋯\n 163 │ Chinstrap  Dream                45.7           17.0                195\n 164 │ Chinstrap  Dream                43.5           18.1                202\n 165 │ Chinstrap  Dream                50.2           18.7                198\n                                                  2 columns and 149 rows omitted\n⋮\nLast Group (168 rows): sex = \"male\"\n Row │ species    island     bill_length_mm  bill_depth_mm  flipper_length_mm  ⋯\n     │ String15   String15   Float64         Float64        Int64              ⋯\n─────┼──────────────────────────────────────────────────────────────────────────\n   1 │ Adelie     Torgersen            39.1           18.7                181  ⋯\n   2 │ Adelie     Torgersen            39.3           20.6                190\n   3 │ Adelie     Torgersen            39.2           19.6                195\n   4 │ Adelie     Torgersen            38.6           21.2                191\n   5 │ Adelie     Torgersen            34.6           21.1                198  ⋯\n   6 │ Adelie     Torgersen            42.5           20.7                197\n   7 │ Adelie     Torgersen            46.0           21.5                194\n   8 │ Adelie     Biscoe               37.7           18.7                180\n  ⋮  │     ⋮          ⋮            ⋮               ⋮                ⋮          ⋱\n 161 │ Chinstrap  Dream                50.7           19.7                203  ⋯\n 162 │ Chinstrap  Dream                52.2           18.8                197\n 163 │ Chinstrap  Dream                49.3           19.9                203\n 164 │ Chinstrap  Dream                50.2           18.8                202\n 165 │ Chinstrap  Dream                51.9           19.5                206  ⋯\n 166 │ Chinstrap  Dream                55.8           19.8                207\n 167 │ Chinstrap  Dream                49.6           18.2                193\n 168 │ Chinstrap  Dream                50.8           19.0                210\n                                                  2 columns and 152 rows omitted\n```\n:::\n\n```{.julia .cell-code}\n\nres = combine(gp_penguins, :bill_length_mm => (bill_length_mm -> OneSampleADTest(bill_length_mm, Normal())) => :ADTest)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n2×2 DataFrame\n Row │ sex      ADTest\n     │ String7  OneSampl…\n─────┼────────────────────────────────────────────\n   1 │ female   One sample Anderson-Darling test…\n   2 │ male     One sample Anderson-Darling test…\n```\n:::\n\n```{.julia .cell-code}\n\nprintln(res[1,:])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nDataFrameRow\n Row │ sex      ADTest\n     │ String7  OneSampl…\n─────┼────────────────────────────────────────────\n   1 │ female   One sample Anderson-Darling test…\n```\n:::\n:::\n\n:::\n\n# Test d'homostédasticité\n::: {.panel-tabset}\n\n## R\n\n::: {.cell}\n\n```{.r .cell-code}\nbartlett.test(bill_length_mm ~ sex, data = penguins)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n\tBartlett test of homogeneity of variances\n\ndata:  bill_length_mm by sex\nBartlett's K-squared = 1.3429, df = 1, p-value = 0.2465\n```\n:::\n:::\n\n\n## Julia\n\n::: {.cell}\n\n```{.julia .cell-code}\n# Pour une raison incconnue une syntaxe indentique à celle utilisée plus bas ne fonctionne pas\nBartlettTest(penguins[penguins.sex .== \"male\",:bill_length_mm], \n             penguins[penguins.sex .== \"female\",:bill_length_mm])\n\n```\n:::\n\n\n:::\n\n# Test de comparaison de moyennes\n\n::: {.panel-tabset}\n\n## R\n\n::: {.cell}\n\n```{.r .cell-code}\nt.test(bill_length_mm ~ sex,  data = penguins)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n\tWelch Two Sample t-test\n\ndata:  bill_length_mm by sex\nt = -6.6725, df = 329.29, p-value = 1.066e-10\nalternative hypothesis: true difference in means between group female and group male is not equal to 0\n95 percent confidence interval:\n -4.865676 -2.649908\nsample estimates:\nmean in group female   mean in group male \n            42.09697             45.85476 \n```\n:::\n:::\n\n\n## Julia\n\n::: {.cell}\n\n```{.julia .cell-code}\nEqualVarianceTTest(penguins[penguins.sex .== \"male\",:bill_length_mm], \n                   penguins[penguins.sex .== \"female\",:bill_length_mm])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTwo sample t-test (equal variance)\n----------------------------------\nPopulation details:\n    parameter of interest:   Mean difference\n    value under h_0:         0\n    point estimate:          3.75779\n    95% confidence interval: (2.649, 4.867)\n\nTest summary:\n    outcome with 95% confidence: reject h_0\n    two-sided p-value:           <1e-09\n\nDetails:\n    number of observations:   [168,165]\n    t-statistic:              6.667027633163074\n    degrees of freedom:       331\n    empirical standard error: 0.5636383129867701\n```\n:::\n:::\n\n\n:::\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}